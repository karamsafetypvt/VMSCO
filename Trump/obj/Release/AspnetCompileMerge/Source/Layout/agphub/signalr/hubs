/*!
 * ASP.NET SignalR JavaScript Library v2.2.1
 * http://signalr.net/
 *
 * Copyright (c) .NET Foundation. All rights reserved.
 * Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
 *
 */

/// <reference path="..\..\SignalR.Client.JS\Scripts\jquery-1.6.4.js" />
/// <reference path="jquery.signalR.js" />
(function ($, window, undefined) {
    /// <param name="$" type="jQuery" />
    "use strict";

    if (typeof ($.signalR) !== "function") {
        throw new Error("SignalR: SignalR is not loaded. Please ensure jquery.signalR-x.js is referenced before ~/signalr/js.");
    }

    var signalR = $.signalR;

    function makeProxyCallback(hub, callback) {
        return function () {
            // Call the client hub method
            callback.apply(hub, $.makeArray(arguments));
        };
    }

    function registerHubProxies(instance, shouldSubscribe) {
        var key, hub, memberKey, memberValue, subscriptionMethod;

        for (key in instance) {
            if (instance.hasOwnProperty(key)) {
                hub = instance[key];

                if (!(hub.hubName)) {
                    // Not a client hub
                    continue;
                }

                if (shouldSubscribe) {
                    // We want to subscribe to the hub events
                    subscriptionMethod = hub.on;
                } else {
                    // We want to unsubscribe from the hub events
                    subscriptionMethod = hub.off;
                }

                // Loop through all members on the hub and find client hub functions to subscribe/unsubscribe
                for (memberKey in hub.client) {
                    if (hub.client.hasOwnProperty(memberKey)) {
                        memberValue = hub.client[memberKey];

                        if (!$.isFunction(memberValue)) {
                            // Not a client hub function
                            continue;
                        }

                        subscriptionMethod.call(hub, memberKey, makeProxyCallback(hub, memberValue));
                    }
                }
            }
        }
    }

    $.hubConnection.prototype.createHubProxies = function () {
        var proxies = {};
        this.starting(function () {
            // Register the hub proxies as subscribed
            // (instance, shouldSubscribe)
            registerHubProxies(proxies, true);

            this._registerSubscribedHubs();
        }).disconnected(function () {
            // Unsubscribe all hub proxies when we "disconnect".  This is to ensure that we do not re-add functional call backs.
            // (instance, shouldSubscribe)
            registerHubProxies(proxies, false);
        });

        proxies['myHub'] = this.createHubProxy('myHub'); 
        proxies['myHub'].client = { };
        proxies['myHub'].server = {
            addMessage: function (clientName, RequestFrom, TranID, TranType, CreatedBy, message, VisitorName, VisitorCompanyName, VisitorStatus, PersonToMeetName) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["AddMessage"], $.makeArray(arguments)));
             },

            appointmentCreated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["appointmentCreated"], $.makeArray(arguments)));
             },

            appointmentDeleted: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["appointmentDeleted"], $.makeArray(arguments)));
             },

            appointmentRequestDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["appointmentRequestDeleted"], $.makeArray(arguments)));
             },

            appointmentUpdated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["appointmentUpdated"], $.makeArray(arguments)));
             },

            assetAllocationCreated: function (clientName, C) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["assetAllocationCreated"], $.makeArray(arguments)));
             },

            assetAllocationDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["assetAllocationDeleted"], $.makeArray(arguments)));
             },

            assetAllocationUpdated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["assetAllocationUpdated"], $.makeArray(arguments)));
             },

            assetDetailsCreated: function (clientName, C) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["assetDetailsCreated"], $.makeArray(arguments)));
             },

            assetDetailsDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["assetDetailsDeleted"], $.makeArray(arguments)));
             },

            assetDetailsUpdated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["assetDetailsUpdated"], $.makeArray(arguments)));
             },

            assetsControlCenterCreated: function (clientName, C) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["assetsControlCenterCreated"], $.makeArray(arguments)));
             },

            assetsControlCenterDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["assetsControlCenterDeleted"], $.makeArray(arguments)));
             },

            assetsControlCenterUpdated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["assetsControlCenterUpdated"], $.makeArray(arguments)));
             },

            assetsCreated: function (clientName, C) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["assetsCreated"], $.makeArray(arguments)));
             },

            assetsDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["assetsDeleted"], $.makeArray(arguments)));
             },

            assetsUpdated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["assetsUpdated"], $.makeArray(arguments)));
             },

            authorizationRequestDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["authorizationRequestDeleted"], $.makeArray(arguments)));
             },

            canteenMenuDefinitionCreated: function (clientName, C) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["canteenMenuDefinitionCreated"], $.makeArray(arguments)));
             },

            canteenMenuDefinitionDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["canteenMenuDefinitionDeleted"], $.makeArray(arguments)));
             },

            canteenMenuDefinitionUpdated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["canteenMenuDefinitionUpdated"], $.makeArray(arguments)));
             },

            canteenRegularizationCreated: function (clientName, C) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["canteenRegularizationCreated"], $.makeArray(arguments)));
             },

            canteenRegularizationDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["canteenRegularizationDeleted"], $.makeArray(arguments)));
             },

            canteenRegularizationUpdated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["canteenRegularizationUpdated"], $.makeArray(arguments)));
             },

            canteenTerminalCreated: function (clientName, C) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["canteenTerminalCreated"], $.makeArray(arguments)));
             },

            canteenTerminalDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["canteenTerminalDeleted"], $.makeArray(arguments)));
             },

            canteenTerminalUpdated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["canteenTerminalUpdated"], $.makeArray(arguments)));
             },

            categoryCreated: function (clientName, C) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["categoryCreated"], $.makeArray(arguments)));
             },

            categoryDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["categoryDeleted"], $.makeArray(arguments)));
             },

            categoryUpdated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["categoryUpdated"], $.makeArray(arguments)));
             },

            employeeOutPassCreated: function (clientName, C) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["employeeOutPassCreated"], $.makeArray(arguments)));
             },

            employeeOutPassDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["employeeOutPassDeleted"], $.makeArray(arguments)));
             },

            employeeOutPassRequestMessage: function (clientName, tranID, TranType, createdBy, Message, EmployeeName, DepartmentName, Status) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["employeeOutPassRequestMessage"], $.makeArray(arguments)));
             },

            employeeOutPassUpdated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["employeeOutPassUpdated"], $.makeArray(arguments)));
             },

            forceLogout: function (clientName, message) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["forceLogout"], $.makeArray(arguments)));
             },

            gateConfirmationCreated: function (clientName, C) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["gateConfirmationCreated"], $.makeArray(arguments)));
             },

            gateConfirmationDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["gateConfirmationDeleted"], $.makeArray(arguments)));
             },

            gateConfirmationUpdated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["gateConfirmationUpdated"], $.makeArray(arguments)));
             },

            gateCreated: function (clientName, C) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["gateCreated"], $.makeArray(arguments)));
             },

            gateDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["gateDeleted"], $.makeArray(arguments)));
             },

            gateUpdated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["gateUpdated"], $.makeArray(arguments)));
             },

            guestCouponCreated: function (clientName, C) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["guestCouponCreated"], $.makeArray(arguments)));
             },

            guestCouponDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["guestCouponDeleted"], $.makeArray(arguments)));
             },

            guestCouponUpdated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["guestCouponUpdated"], $.makeArray(arguments)));
             },

            inwardConfirmationCreated: function (clientName, C) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["inwardConfirmationCreated"], $.makeArray(arguments)));
             },

            inwardConfirmationDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["inwardConfirmationDeleted"], $.makeArray(arguments)));
             },

            inwardConfirmationUpdated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["inwardConfirmationUpdated"], $.makeArray(arguments)));
             },

            inwardCreated: function (clientName, C) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["inwardCreated"], $.makeArray(arguments)));
             },

            inwardDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["inwardDeleted"], $.makeArray(arguments)));
             },

            inwardUpdated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["inwardUpdated"], $.makeArray(arguments)));
             },

            itemCreated: function (clientName, C) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["itemCreated"], $.makeArray(arguments)));
             },

            itemDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["itemDeleted"], $.makeArray(arguments)));
             },

            itemUpdated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["itemUpdated"], $.makeArray(arguments)));
             },

            ldmeCreated: function (clientName, LDME) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["ldmeCreated"], $.makeArray(arguments)));
             },

            ldmeDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["ldmeDeleted"], $.makeArray(arguments)));
             },

            ldmeUpdated: function (clientName, LDME) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["ldmeUpdated"], $.makeArray(arguments)));
             },

            materialIOCreated: function (clientName, C) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["materialIOCreated"], $.makeArray(arguments)));
             },

            materialIODeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["materialIODeleted"], $.makeArray(arguments)));
             },

            materialIOUpdated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["materialIOUpdated"], $.makeArray(arguments)));
             },

            meetingRoomBookingRequestResponse: function (requestedBy, approverId, msgId, secondLevelAuth, roomAdminId, meetingRoomData, requesterName) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["meetingRoomBookingRequestResponse"], $.makeArray(arguments)));
             },

            menuDefinitionCreated: function (clientName, C) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["menuDefinitionCreated"], $.makeArray(arguments)));
             },

            menuDefinitionDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["menuDefinitionDeleted"], $.makeArray(arguments)));
             },

            menuDefinitionUpdated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["menuDefinitionUpdated"], $.makeArray(arguments)));
             },

            menuItemsCreated: function (clientName, C) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["menuItemsCreated"], $.makeArray(arguments)));
             },

            menuItemsDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["menuItemsDeleted"], $.makeArray(arguments)));
             },

            menuItemsUpdated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["menuItemsUpdated"], $.makeArray(arguments)));
             },

            outwardCreated: function (clientName, C) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["outwardCreated"], $.makeArray(arguments)));
             },

            outwardDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["outwardDeleted"], $.makeArray(arguments)));
             },

            outwardUpdated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["outwardUpdated"], $.makeArray(arguments)));
             },

            regularisationCreated: function (clientName, C) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["regularisationCreated"], $.makeArray(arguments)));
             },

            regularisationDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["regularisationDeleted"], $.makeArray(arguments)));
             },

            regularisationUpdated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["regularisationUpdated"], $.makeArray(arguments)));
             },

            roleCreated: function (clientName, C) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["roleCreated"], $.makeArray(arguments)));
             },

            roleDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["roleDeleted"], $.makeArray(arguments)));
             },

            roleUpdated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["roleUpdated"], $.makeArray(arguments)));
             },

            sendMessage: function (ReceiverID, TranID, TranType, CreatedBy, message) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["sendMessage"], $.makeArray(arguments)));
             },

            sendMessageToAllowVisitor: function (TranID, TranType, CreatedBy, LanguageID, CompanyID, SiteID, CompanyParameters, Message, Prefix) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["sendMessageToAllowVisitor"], $.makeArray(arguments)));
             },

            sendMessageToBayStatusBoard: function (CompanyID, SiteID, Message) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["sendMessageToBayStatusBoard"], $.makeArray(arguments)));
             },

            sendMessageToCanteenStatusBoard: function (CompanyID, SiteID, Message) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["sendMessageToCanteenStatusBoard"], $.makeArray(arguments)));
             },

            sendMessageToRejectVisitor: function (TranID, TranType, CreatedBy, LanguageID, SiteID, CompanyID, CompanyParameters, Message, Prefix) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["sendMessageToRejectVisitor"], $.makeArray(arguments)));
             },

            sendNoResponseMethod: function (ReceiverID, TranID, Prefix, LanguageID, message) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["SendNoResponseMethod"], $.makeArray(arguments)));
             },

            templatesCreated: function (clientName, C) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["templatesCreated"], $.makeArray(arguments)));
             },

            templatesDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["templatesDeleted"], $.makeArray(arguments)));
             },

            templatesUpdated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["templatesUpdated"], $.makeArray(arguments)));
             },

            udfCreated: function (clientName, C) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["udfCreated"], $.makeArray(arguments)));
             },

            udfDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["udfDeleted"], $.makeArray(arguments)));
             },

            udfUpdated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["udfUpdated"], $.makeArray(arguments)));
             },

            userCreated: function (clientName, C) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["userCreated"], $.makeArray(arguments)));
             },

            userDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["userDeleted"], $.makeArray(arguments)));
             },

            userUpdated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["userUpdated"], $.makeArray(arguments)));
             },

            visitorCompanyCreated: function (clientName, C) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["visitorCompanyCreated"], $.makeArray(arguments)));
             },

            visitorCompanyDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["visitorCompanyDeleted"], $.makeArray(arguments)));
             },

            visitorCompanyUpdated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["visitorCompanyUpdated"], $.makeArray(arguments)));
             },

            visitorCreated: function (clientName, C) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["visitorCreated"], $.makeArray(arguments)));
             },

            visitorDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["visitorDeleted"], $.makeArray(arguments)));
             },

            visitorGatepassDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["visitorGatepassDeleted"], $.makeArray(arguments)));
             },

            visitorUpdated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["visitorUpdated"], $.makeArray(arguments)));
             },

            voucherSeriesCreated: function (clientName, C) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["voucherSeriesCreated"], $.makeArray(arguments)));
             },

            voucherSeriesDeleted: function (clientName, recordId) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["voucherSeriesDeleted"], $.makeArray(arguments)));
             },

            voucherSeriesUpdated: function (clientName, record) {
                return proxies['myHub'].invoke.apply(proxies['myHub'], $.merge(["voucherSeriesUpdated"], $.makeArray(arguments)));
             }
        };

        return proxies;
    };

    signalR.hub = $.hubConnection("/agphub/signalr", { useDefaultPath: false });
    $.extend(signalR, signalR.hub.createHubProxies());

}(window.jQuery, window));